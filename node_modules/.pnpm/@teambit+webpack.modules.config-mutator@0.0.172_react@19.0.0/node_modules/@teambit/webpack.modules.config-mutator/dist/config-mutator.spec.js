"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_mutator_1 = require("./config-mutator");
class MyPlugin {
    apply() { }
}
const cssRule = {
    test: /\.css$/,
    exclude: /\.module\.css$/,
    use: ['style-loader', 'css-loader'],
};
describe('add entry', () => {
    it('add simple entry', () => {
        const config = new config_mutator_1.WebpackConfigMutator({});
        config.addEntry('./entry1');
        expect(config.raw.entry).toContain('./entry1');
    });
    it('prepend entry', () => {
        var _a;
        const config = new config_mutator_1.WebpackConfigMutator({});
        config.addEntry('./entry1');
        config.addEntry('./entry2', { position: 'prepend' });
        expect(config.raw.entry).toContain('./entry1');
        expect(config.raw.entry).toContain('./entry2');
        expect((_a = config.raw.entry) === null || _a === void 0 ? void 0 : _a[0]).toEqual('./entry2');
    });
});
describe('add plugin', () => {
    it('add simple plugin', () => {
        var _a;
        const config = new config_mutator_1.WebpackConfigMutator({});
        config.addPlugin(new MyPlugin());
        expect((_a = config.raw.plugins) === null || _a === void 0 ? void 0 : _a[0]).toBeInstanceOf(MyPlugin);
    });
});
describe('add aliases', () => {
    it('add simple alias', () => {
        var _a;
        const config = new config_mutator_1.WebpackConfigMutator({});
        config.addAliases({ react: 'custom-react-path' });
        // @ts-ignore - error since there is mix between mocha and jest types
        expect((_a = config.raw.resolve) === null || _a === void 0 ? void 0 : _a.alias).toHaveProperty('react', 'custom-react-path');
    });
});
describe('add top level', () => {
    it('add simple alias', () => {
        const config = new config_mutator_1.WebpackConfigMutator({});
        config.addTopLevel('output', { publicPath: 'my-public-path' });
        // @ts-ignore - error since there is mix between mocha and jest types
        expect(config.raw).toHaveProperty('output');
        // @ts-ignore - error since there is mix between mocha and jest types
        expect(config.raw.output).toHaveProperty('publicPath', 'my-public-path');
    });
});
describe('add module rule', () => {
    it('add css rule', () => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const config = new config_mutator_1.WebpackConfigMutator({});
        config.addModuleRule(cssRule);
        expect((_b = (_a = config.raw.module) === null || _a === void 0 ? void 0 : _a.rules) === null || _b === void 0 ? void 0 : _b.length).toEqual(1);
        // @ts-ignore - error since there is mix between mocha and jest types
        expect((_d = (_c = config.raw.module) === null || _c === void 0 ? void 0 : _c.rules) === null || _d === void 0 ? void 0 : _d[0]).toHaveProperty('test', /\.css$/);
        // @ts-ignore - error since there is mix between mocha and jest types
        expect((_f = (_e = config.raw.module) === null || _e === void 0 ? void 0 : _e.rules) === null || _f === void 0 ? void 0 : _f[0]).toHaveProperty('exclude', /\.module\.css$/);
        // @ts-ignore - error since there is mix between mocha and jest types
        expect((_h = (_g = config.raw.module) === null || _g === void 0 ? void 0 : _g.rules) === null || _h === void 0 ? void 0 : _h[0]).toHaveProperty('use', ['style-loader', 'css-loader']);
    });
});
//# sourceMappingURL=config-mutator.spec.js.map