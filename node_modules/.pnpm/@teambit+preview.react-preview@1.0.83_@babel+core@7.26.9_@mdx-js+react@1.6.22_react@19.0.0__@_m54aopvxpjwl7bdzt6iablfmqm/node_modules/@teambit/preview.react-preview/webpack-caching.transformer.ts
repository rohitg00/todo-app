import { WebpackConfigMutator, WebpackConfigTransformer } from '@teambit/webpack';

export function createCacheControlTransformer(): WebpackConfigTransformer {
  return (configMutator: WebpackConfigMutator) => {
    const config = configMutator.raw;
    config.devtool = false;

    if (!config.optimization) {
      config.optimization = {};
    }
    if (!config.devServer) {
      config.devServer = {};
    }
    if (!config.devServer.setupMiddlewares) {
      config.devServer.setupMiddlewares = [];
    }
    config.optimization = {
      ...config.optimization,
      minimize: true,
      concatenateModules: true,
      moduleIds: 'named',
      runtimeChunk:  {
        name: 'runtime',        
      },
      splitChunks: {
        chunks: 'all',
        maxInitialRequests: 2,
        minSize: 2000000,
        maxSize: 5000000,
        cacheGroups: {
          vendors: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendors',
            priority: 30,
            enforce: true,
            reuseExistingChunk: true,
          },
          main: {
            test: /\.(js|jsx|ts|tsx)$/,
            name: 'main',
            priority: 10,
            enforce: true,
            chunks: 'all',
          }
        },
      },
    };

    const originalSetupMiddlewares = config.devServer.setupMiddlewares;

    config.devServer.setupMiddlewares = (middlewares, devServer) => {
      middlewares.unshift({
        name: 'performance-middleware',
        middleware: (req, res, next) => {
          if (req.path.endsWith('.js')) {
            res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');
          }
          if (req.path === '/' || req.path.endsWith('.html')) {
            res.setHeader('Cache-Control', 'public, max-age=1');
          }
          next();
        }
      });

      return typeof originalSetupMiddlewares === 'function'
        ? originalSetupMiddlewares(middlewares, devServer)
        : middlewares;
    };

    return configMutator;
  };
}