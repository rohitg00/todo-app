import { TesterContext, Tests } from '@teambit/tester';
import { Workspace } from '@teambit/workspace';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { type InlineConfig as ViteConfig } from 'vite';
import type { Vitest } from 'vitest/node';
import { VitestTesterOptions } from './vitest-options.js';
type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;
export type VitestFile = ArrayElement<ReturnType<Vitest['state']['getFiles']>>;
export declare const patternsToArray: (opts: VitestTesterOptions, context: TesterContext) => string[];
export declare const getExclude: (opts: VitestTesterOptions) => string[];
export declare const getConfig: (configPath: string, context: TesterContext, workspace: Workspace | undefined, depResolver: DependencyResolverMain, watch?: boolean) => Promise<ViteConfig>;
export declare const getResultFromFiles: (files: VitestFile[], errors: unknown[], opts: VitestTesterOptions, context: TesterContext) => Tests;
export {};
