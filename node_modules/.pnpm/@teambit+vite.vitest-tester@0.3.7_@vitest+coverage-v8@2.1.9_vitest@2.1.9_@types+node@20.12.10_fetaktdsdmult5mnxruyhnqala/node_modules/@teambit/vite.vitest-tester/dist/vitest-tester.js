/* eslint-disable max-classes-per-file */
import { createRequire } from 'module';
import fsExtra from 'fs-extra';
import { proxy } from 'comlink';
import { WorkspaceAspect } from '@teambit/workspace';
import { DependencyResolverAspect } from '@teambit/dependency-resolver';
import { startVitest, VitestPackageInstaller } from 'vitest/node';
import { patternsToArray, getExclude, getConfig, getResultFromFiles, } from './utils.js';
const { readFileSync, readJsonSync } = fsExtra;
const require = createRequire(import.meta.url);
export class VitestTester {
    constructor(id, configPath, vitestWorker, logger, workspace, depResolver, opts = {}) {
        this.id = id;
        this.configPath = configPath;
        this.vitestWorker = vitestWorker;
        this.logger = logger;
        this.workspace = workspace;
        this.depResolver = depResolver;
        this.opts = opts;
        this.displayName = 'Vitest';
    }
    static from(options) {
        const id = options.name || 'vitest-tester';
        return (context) => {
            const logger = context.createLogger(id);
            const worker = context.createWorker(id, require.resolve('./vitest.worker'));
            let workspace;
            try {
                workspace = context.getAspect(WorkspaceAspect.id);
            }
            catch (err) {
                logger.info('unable to load workspace aspect');
            }
            const depResolver = context.getAspect(DependencyResolverAspect.id);
            return new VitestTester(id, options.config, worker, logger, workspace, depResolver, options);
        };
    }
    version() {
        const filePath = require.resolve('vitest/package.json');
        const vitestPackageInfo = readJsonSync(filePath);
        return vitestPackageInfo.version;
    }
    displayConfig() {
        return readFileSync(this.configPath, 'utf8');
    }
    async onTestRunComplete(callback) {
        this.onTestRunCompleteCb = callback;
    }
    async test(context) {
        const viteConfig = await getConfig(this.configPath, context, this.workspace, this.depResolver, false);
        const include = patternsToArray(this.opts, context);
        const exclude = getExclude(this.opts);
        viteConfig.test.include = include;
        if (exclude) {
            viteConfig.test.exclude = exclude;
        }
        if (context.updateSnapshot) {
            viteConfig.test.update = true;
        }
        if (context.watch) {
            viteConfig.test.watch = true;
        }
        // skip installation checks
        class CustomPackageInstaller extends VitestPackageInstaller {
            async ensureInstalled() {
                return true;
            }
        }
        const vitest = await startVitest('test', undefined, undefined, viteConfig, {
            packageInstaller: new CustomPackageInstaller()
        });
        if (context.watch) {
            // hold the process
            await new Promise(() => { });
        }
        await vitest.close();
        const files = vitest.state.getFiles();
        const errors = Array.from(vitest.state.errorsSet);
        const result = getResultFromFiles(files, errors, this.opts, context);
        return result;
    }
    async watch(context) {
        const viteConfig = await getConfig(this.configPath, context, this.workspace, this.depResolver, true);
        viteConfig.test.include = patternsToArray(this.opts, context);
        viteConfig.test.exclude = getExclude(this.opts);
        const workerApi = this.vitestWorker.initiate(context.ui
            ? { stdout: true, stderr: true, stdin: true }
            : { stdout: false, stderr: false, stdin: false });
        const onTestCompleteCb = proxy((files, errors) => {
            if (!this.onTestRunCompleteCb || !files)
                return;
            const tests = getResultFromFiles(files || [], errors || [], this.opts, context);
            this.onTestRunCompleteCb(tests);
        });
        await workerApi.onTestComplete(onTestCompleteCb);
        await workerApi.watch(viteConfig);
        return {};
    }
}
//# sourceMappingURL=vitest-tester.js.map