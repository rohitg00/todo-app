import outdent from 'outdent';

type HtmlElementBasic = {
  parent: 'head' | 'body' | string;
  position: 'prepend' | 'append';
};

type HtmlElementWithAttributes = HtmlElementBasic & {
  attributes?: { [key: string]: string };
  tag: string;
  content?: string;
  raw?: never;
};

type HtmlElementWithRaw = HtmlElementBasic & {
  raw?: string;
  attributes?: never;
  tag?: never;
  content?: never;
};

export type InjectedHtmlElement =
  | HtmlElementWithAttributes
  | HtmlElementWithRaw;

const VOID_ELEMENT_TAGS = [
  'area',
  'base',
  'br',
  'col',
  'embed',
  'hr',
  'img',
  'input',
  'link',
  'meta',
  'source',
  'track',
  'wbr',
];

/**
 * Check if an element tag is void.
 *
 * @param {string} tag - the element tag
 * @returns {boolean} true | false
 */
function isVoidElementTag(tag: string) {
  return VOID_ELEMENT_TAGS.indexOf(tag) > -1;
}

/**
 * Simple function to inject an element into an html string.
 * @param html
 * @param element
 * @returns html with injected element
 */
export function inject(html: string, element: InjectedHtmlElement): string {
  const { tag, content, attributes, parent, position, raw } = element;

  if (raw && attributes) {
    throw new Error(
      'You cannot use both raw and attributes in the same element'
    );
  }

  if (raw) {
    if (!parent) {
      return outdent`
        ${html}
        ${raw}
      `;
    }

    const startParentRegex = new RegExp(`<${parent}[^>]*>`);
    const endParentRegex = new RegExp(`</${parent}>`);

    if (position === 'prepend') {
      return html.replace(
        startParentRegex,
        outdent`
          <${parent}>
          ${raw}
        `
      );
    }

    return html.replace(
      endParentRegex,
      outdent`
        ${raw}
        </${parent}>
      `
    );
  }

  const attributesString = attributes
    ? Object.keys(attributes || {})
        .map((key) => `${key}="${attributes[key]}"`)
        .join(' ')
    : '';

  const elementString = isVoidElementTag(tag!)
    ? `<${tag} ${attributesString} />`
    : `<${tag} ${attributesString}>${content || ''}</${tag}>`;

  if (!parent) {
    return outdent`
      ${html}
      ${elementString}
    `;
  }

  const startParentRegex = new RegExp(`<${parent}[^>]*>`);
  const endParentRegex = new RegExp(`</${parent}>`);

  if (position === 'prepend') {
    return html.replace(
      startParentRegex,
      outdent`
        <${parent}>
        ${elementString}
      `
    );
  }
  return html.replace(
    endParentRegex,
    outdent`
      ${elementString}
      </${parent}>
    `
  );
}
