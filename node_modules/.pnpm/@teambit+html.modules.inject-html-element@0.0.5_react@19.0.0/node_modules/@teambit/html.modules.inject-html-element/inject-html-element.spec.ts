import { inject } from './inject-html-element';
import { load } from 'cheerio';

const basicHtml = `
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <body>
        <div id="app"></div>
    </body>
</html>
`;

const checkInjection = (html, selector, expected) => {
  const $ = load(html);
  const element = $(selector).get(0);
  return element?.attribs && expected(element.attribs);
};

it('injects a script tag into the head', () => {
  const html = inject(basicHtml, {
    tag: 'script',
    parent: 'head',
    position: 'append',
    attributes: {
      src: 'https://example.com/script.js',
    },
  });

  expect(
    checkInjection(
      html,
      'head script[src="https://example.com/script.js"]',
      (attribs) => attribs.src === 'https://example.com/script.js'
    )
  ).toBe(true);
});

it('injects a script tag into the body', () => {
  const html = inject(basicHtml, {
    tag: 'script',
    parent: 'body',
    position: 'prepend',
    attributes: {
      src: 'https://example.com/script.js',
    },
  });

  expect(
    checkInjection(
      html,
      'body script[src="https://example.com/script.js"]',
      (attribs) => attribs.src === 'https://example.com/script.js'
    )
  ).toBe(true);
});

test('injects a script tag into the body with content', () => {
  const html = inject(basicHtml, {
    tag: 'script',
    parent: 'body',
    position: 'append',
    content: 'console.log("hello world")',
  });

  expect(
    checkInjection(html, 'body script', (attribs) => attribs.type === undefined)
  ).toBe(true);
  expect(load(html)('body script').html()).toBe('console.log("hello world")');
});

test('injects a script tag into the body with content and attributes', () => {
  const html = inject(basicHtml, {
    tag: 'script',
    parent: 'body',
    position: 'append',
    content: 'console.log("hello world")',
    attributes: {
      type: 'text/javascript',
    },
  });

  expect(
    checkInjection(
      html,
      'body script[type="text/javascript"]',
      (attribs) => attribs.type === 'text/javascript'
    )
  ).toBe(true);
  expect(load(html)('body script[type="text/javascript"]').html()).toBe(
    'console.log("hello world")'
  );
});

test('injects a style tag into the head', () => {
  const html = inject(basicHtml, {
    tag: 'style',
    parent: 'head',
    position: 'append',
    content: 'body { background: red; }',
  });

  expect(
    checkInjection(html, 'head style', (attribs) => attribs.type === undefined)
  ).toBe(true);
  expect(load(html)('head style').html()).toBe('body { background: red; }');
});

test('injects a style tag into the body', () => {
  const html = inject(basicHtml, {
    tag: 'style',
    parent: 'body',
    position: 'prepend',
    content: 'body { background: red; }',
  });

  expect(
    checkInjection(html, 'body style', (attribs) => attribs.type === undefined)
  ).toBe(true);
  expect(load(html)('body style').html()).toBe('body { background: red; }');
});

test('injects a style tag into the body with attributes', () => {
  const html = inject(basicHtml, {
    tag: 'style',
    parent: 'body',
    position: 'prepend',
    content: 'body { background: red; }',
    attributes: {
      type: 'text/css',
    },
  });

  expect(
    checkInjection(
      html,
      'body style[type="text/css"]',
      (attribs) => attribs.type === 'text/css'
    )
  ).toBe(true);
  expect(load(html)('body style[type="text/css"]').html()).toBe(
    'body { background: red; }'
  );
});

test('injects tailwind cdn into the head with a custom config', () => {
  const a = inject(basicHtml, {
    parent: 'head',
    position: 'append',
    tag: 'script',
    attributes: {
      src: 'https://cdn.tailwindcss.com/',
    },
  });

  const b = inject(a, {
    parent: 'head',
    position: 'append',
    tag: 'script',
    content: `tailwind.config = { theme: { extend: { colors: { clifford: '#da373d', } } } }`,
  });

  expect(
    checkInjection(
      b,
      'head script[src="https://cdn.tailwindcss.com/"]',
      (attribs) => attribs.src === 'https://cdn.tailwindcss.com/'
    )
  ).toBe(true);

  expect(
    checkInjection(b, 'head script', (attribs) => attribs.type === undefined)
  ).toBe(true);
  expect(load(b)('head script').last().html()).toBe(
    `tailwind.config = { theme: { extend: { colors: { clifford: '#da373d', } } } }`
  );
});

test('injects a custom element into the html parent', () => {
  const html = inject(basicHtml, {
    parent: 'html',
    position: 'append',
    tag: 'custom-element',
    content: 'hello world',
  });

  expect(
    checkInjection(
      html,
      'html custom-element',
      (attribs) => Object.keys(attribs).length === 0
    )
  ).toBe(true);
  expect(load(html)('html custom-element').html()).toBe('hello world');
});

test('injects a raw html string into the html parent', () => {
  const html = inject(basicHtml, {
    parent: 'html',
    position: 'append',
    raw: '<custom-element>hello world</custom-element>',
  });

  expect(
    checkInjection(
      html,
      'html custom-element',
      (attribs) => Object.keys(attribs).length === 0
    )
  ).toBe(true);

  expect(load(html)('html custom-element').html()).toBe('hello world');
});
