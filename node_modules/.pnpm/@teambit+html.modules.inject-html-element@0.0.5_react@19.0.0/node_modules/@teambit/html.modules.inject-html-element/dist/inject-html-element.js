"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inject = void 0;
const outdent_1 = __importDefault(require("outdent"));
const VOID_ELEMENT_TAGS = [
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'link',
    'meta',
    'source',
    'track',
    'wbr',
];
/**
 * Check if an element tag is void.
 *
 * @param {string} tag - the element tag
 * @returns {boolean} true | false
 */
function isVoidElementTag(tag) {
    return VOID_ELEMENT_TAGS.indexOf(tag) > -1;
}
/**
 * Simple function to inject an element into an html string.
 * @param html
 * @param element
 * @returns html with injected element
 */
function inject(html, element) {
    const { tag, content, attributes, parent, position, raw } = element;
    if (raw && attributes) {
        throw new Error('You cannot use both raw and attributes in the same element');
    }
    if (raw) {
        if (!parent) {
            return (0, outdent_1.default) `
        ${html}
        ${raw}
      `;
        }
        const startParentRegex = new RegExp(`<${parent}[^>]*>`);
        const endParentRegex = new RegExp(`</${parent}>`);
        if (position === 'prepend') {
            return html.replace(startParentRegex, (0, outdent_1.default) `
          <${parent}>
          ${raw}
        `);
        }
        return html.replace(endParentRegex, (0, outdent_1.default) `
        ${raw}
        </${parent}>
      `);
    }
    const attributesString = attributes
        ? Object.keys(attributes || {})
            .map((key) => `${key}="${attributes[key]}"`)
            .join(' ')
        : '';
    const elementString = isVoidElementTag(tag)
        ? `<${tag} ${attributesString} />`
        : `<${tag} ${attributesString}>${content || ''}</${tag}>`;
    if (!parent) {
        return (0, outdent_1.default) `
      ${html}
      ${elementString}
    `;
    }
    const startParentRegex = new RegExp(`<${parent}[^>]*>`);
    const endParentRegex = new RegExp(`</${parent}>`);
    if (position === 'prepend') {
        return html.replace(startParentRegex, (0, outdent_1.default) `
        <${parent}>
        ${elementString}
      `);
    }
    return html.replace(endParentRegex, (0, outdent_1.default) `
      ${elementString}
      </${parent}>
    `);
}
exports.inject = inject;
//# sourceMappingURL=inject-html-element.js.map