import findRoot from 'find-root';
import { VitestTask, VitestTester } from '@teambit/vite.vitest-tester';
// import { JestTask, JestTester } from '@teambit/defender.jest-tester';
// import { createReactEsbuildType } from '@bitdev/react.app-types.react-esbuild';
// import { ReactAppType } from '@teambit/react.apps.react-app-types';
// import { ViteReactType } from '@bitdev/react.app-types.vite-react';
// import { ReactSsrType } from '@bitdev/react.app-types.react-ssr';
import { StarterList, TemplateList } from '@teambit/generator';
import { ReactComponentTemplate, ReactEnvTemplate, ReactHookTemplate, ReactJSComponentTemplate, ReactViteTemplate, ReactWebpackTemplate, ThemeTemplate, } from '@bitdev/react.generators.react-templates';
import { ReactWorkspaceStarter } from '@bitdev/react.generators.react-starters';
// import { ReactAppType } from '@teambit/react.apps.react-app-types';
import { TypeScriptExtractor } from '@teambit/typescript';
// import { ReactVitePreview } from '@bitdev/react.preview.react-vite-preview';
import { ReactPreview } from '@teambit/preview.react-preview';
import { GLOBAL_TYPES_DIR, resolveTypes, TypescriptCompiler, TypescriptConfigWriter, TypescriptTask, } from '@teambit/typescript.typescript-compiler';
import { EslintConfigWriter, ESLintLinter, EslintTask, } from '@teambit/defender.eslint-linter';
import { ESLint as ESLintLib } from 'eslint';
// import { AppTypeList } from '@teambit/application';
import { PrettierConfigWriter, PrettierFormatter, } from '@teambit/defender.prettier-formatter';
import typescript from 'typescript';
import { CAPSULE_ARTIFACTS_DIR, Pipeline } from '@teambit/builder';
import { ConfigWriterList } from '@teambit/workspace-config-files';
import { PackageGenerator } from '@teambit/pkg';
import { createRequire } from 'node:module';
import { dirname } from 'node:path';
import { fileURLToPath } from 'node:url';
const esmRequire = createRequire(import.meta.url);
const fileFolderPath = dirname(fileURLToPath(import.meta.url));
export class ReactEnv {
    constructor() {
        /**
         * name of the environment. used for friendly mentions across bit.
         */
        this.name = 'react';
        this.type = 'react';
        /**
         * icon for the env. use this to build a more friendly env.
         * uses react by default.
         */
        this.icon = 'https://static.bit.dev/extensions-icons/react.svg';
        this.envCurrentPath = fileFolderPath;
        this.tsconfigPath = esmRequire.resolve('./config/tsconfig.json');
        this.tsTypesPath = './types';
        this.jestConfigPath = esmRequire.resolve('./config/jest.config.cjs');
        this.vitestConfigPath = esmRequire.resolve('./config/vitest.config.mjs');
        this.eslintConfigPath = esmRequire.resolve('./config/eslintrc.cjs');
        this.eslintExtensions = ['.ts', '.tsx', '.js', '.jsx', '.mjs'];
        this.prettierConfigPath = esmRequire.resolve('./config/prettier.config.cjs');
        this.prettierExtensions = [
            '.js',
            '.jsx',
            '.ts',
            '.tsx',
            '.mjs',
            '.cjs',
            '.json',
            '.css',
            '.scss',
            '.md',
            '.mdx',
            '.html',
            '.yml',
            '.yaml',
        ];
        this.previewMounter = esmRequire.resolve('./preview/mounter.js');
        this.previewDocsTemplate = esmRequire.resolve('./preview/docs.js');
        this.previewViteConfig = esmRequire.resolve('./config/vite.config.mjs');
        /**
         * Default npm ignore paths.
         * Will ignore the "artifacts" directory by default.
         */
        this.npmIgnore = [`${CAPSULE_ARTIFACTS_DIR}/`, '.vitest'];
        /**
         * Default package.json modifications.
         */
        this.packageJson = {
            type: 'module',
            main: 'dist/{main}.js',
            types: '{main}.ts',
        };
    }
    /**
     * create an instance of a Bit Component Compiler.
     * Learn more: https://bit.dev/reference/compiling/set-up-compiler
     */
    compiler() {
        return TypescriptCompiler.from({
            esm: true,
            tsconfig: this.tsconfigPath,
            types: this.types,
            typescript,
        });
    }
    /**
     * create an instance of the Bit Tester plugin.
     * learn more: https://bit.dev/reference/testing/set-up-tester
     */
    tester() {
        return VitestTester.from({
            config: this.vitestConfigPath,
        });
        // return JestTester.from({
        //   // jest: esmRequire.resolve('jest'),
        //   config: this.jestConfigPath,
        // });
    }
    /**
     * create an instance for Bit Preview.
     */
    preview() {
        return ReactPreview.from({
            /**
             * override the default docs template for components.
             */
            docsTemplate: this.previewDocsTemplate,
            /**
             * mounters are used to mount components to DOM
             * during preview. use them for wrapping your components
             * with routing, theming, data fetching or other types
             * of providers.
             */
            mounter: this.previewMounter,
            /**
             * peer dependencies to include in your preview.
             * this ensures a single instance exist in preview.
             */
            // transformers: [webpackTransformers]
            // webpackModulePath: require.resolve("webpack"),
            // webpackDevServerModulePath: require.resolve("webpack-dev-server")
        });
    }
    /**
     * returns an instance of the default TypeScript extractor.
     * used by default for type inference for both JS and TS.
     */
    schemaExtractor() {
        return TypeScriptExtractor.from({
            tsconfig: this.tsconfigPath,
        });
    }
    /**
     * add a Bit Linter plugin.
     * learn more: https://bit.dev/reference/testing/set-up-tester
     */
    linter() {
        return ESLintLinter.from({
            tsconfig: this.tsconfigPath,
            eslint: ESLintLib,
            configPath: this.eslintConfigPath,
            // resolve all plugins from the react environment.
            pluginsPath: this.envCurrentPath,
            extensions: this.eslintExtensions,
        });
    }
    /**
     * create a formatter instance.
     * learn more: https://bit.dev/reference/formatting/set-up-formatter
     */
    formatter() {
        return PrettierFormatter.from({
            configPath: this.prettierConfigPath,
        });
    }
    /**
     * Add your build pipeline.
     * learn more: https://bit.dev/docs/react-env/build-pipelines
     */
    build() {
        return Pipeline.from([
            TypescriptTask.from({
                tsconfig: this.tsconfigPath,
                types: this.types,
                typescript,
            }),
            EslintTask.from({
                tsconfig: this.tsconfigPath,
                eslint: ESLintLib,
                configPath: this.eslintConfigPath,
                // resolve all plugins from the react environment.
                pluginsPath: this.envCurrentPath,
                extensions: this.eslintExtensions,
            }),
            VitestTask.from({
                config: this.vitestConfigPath,
            }),
            // JestTask.from({
            //   config: this.jestConfigPath,
            // }),
        ]);
    }
    /**
     * add build tasks to execute upon [snap](https://bit.dev/docs/snaps).
     * use the snap pipeline for staging and test deployments
     */
    snap() {
        return Pipeline.from([]);
    }
    /**
     * add build tasks to execute upon [tag](https://bit.dev/docs/tags).
     * use the tag pipeline for deployments, or other tasks required for
     * publishing a semantic version for a component.
     */
    tag() {
        return Pipeline.from([]);
    }
    /**
     * add configuration writers to the workspace, to sync IDE features with tools operated by Bit
     */
    workspaceConfig() {
        return ConfigWriterList.from([
            TypescriptConfigWriter.from({
                tsconfig: this.tsconfigPath,
                types: this.types,
            }),
            EslintConfigWriter.from({
                configPath: this.eslintConfigPath,
                tsconfig: this.tsconfigPath,
            }),
            PrettierConfigWriter.from({
                configPath: this.prettierConfigPath,
            }),
        ]);
    }
    /**
     * a list of starters for new projects. this helps create a quick and
     * standardized
     */
    starters() {
        return StarterList.from([ReactWorkspaceStarter.from()]);
    }
    /**
     * set a list of component templates to use across your
     * workspaces. new workspaces would be set to include
     * your envs by default.
     */
    generators() {
        return TemplateList.from([
            ReactComponentTemplate.from(),
            ReactViteTemplate.from(),
            ReactHookTemplate.from(),
            ReactWebpackTemplate.from(),
            ReactJSComponentTemplate.from(),
            ReactEnvTemplate.from(),
            ThemeTemplate.from(),
        ]);
    }
    // apps(): EnvHandler<AppTypeList> {
    //   return AppTypeList.from([
    //     ReactSsrType.from(),
    //     ViteReactType.from(),
    //     ReactAppType.from(),
    //   ]);
    // }
    /**
     * configure and control the packaging process of components.
     */
    package() {
        return PackageGenerator.from({
            packageJson: this.packageJson,
            npmIgnore: this.npmIgnore,
        });
    }
    get types() {
        const packagePath = esmRequire.resolve('@teambit/typescript.typescript-compiler');
        const packageRoot = findRoot(packagePath);
        return [
            ...resolveTypes(this.envCurrentPath, [this.tsTypesPath]),
            ...resolveTypes(packageRoot, [GLOBAL_TYPES_DIR]),
        ];
    }
}
export default new ReactEnv();
//# sourceMappingURL=react-env.bit-env.js.map