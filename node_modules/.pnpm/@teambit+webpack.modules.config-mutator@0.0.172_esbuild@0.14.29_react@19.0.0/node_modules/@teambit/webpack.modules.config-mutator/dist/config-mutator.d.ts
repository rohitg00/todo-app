import { Configuration, ResolveOptions, RuleSetRule } from 'webpack';
import { CustomizeRule } from 'webpack-merge';
import { ICustomizeOptions } from 'webpack-merge/dist/types';
import type { InjectedHtmlElement as CustomHtmlElement } from '@teambit/html.modules.inject-html-element';
export * from 'webpack-merge';
type ConflictPolicy = 'override' | 'error' | 'ignore';
type ArrayPosition = 'append' | 'prepend';
type AddKeyOpts = {
    conflictPolicy?: ConflictPolicy;
};
type AddToArrayOpts = {
    position?: ArrayPosition;
};
type MergeOpts = {
    rawConfigPosition: ArrayPosition;
};
type Rules = {
    [s: string]: CustomizeRule | Rules;
};
export declare class WebpackConfigMutator {
    raw: Configuration | any;
    constructor(raw: Configuration | any);
    clone(): WebpackConfigMutator;
    /**
     * Add a key value to the top level config
     * @param key
     * @param value
     */
    addTopLevel(key: string, value: any, opts?: AddKeyOpts): WebpackConfigMutator;
    /**
     * Remove a key from the top level
     * @param key
     * @returns
     */
    removeTopLevel(key: string): WebpackConfigMutator;
    /**
     * Add new entry to the config
     * @param entry
     * @param opts
     * @returns
     */
    addEntry(entry: string, opts?: AddToArrayOpts): WebpackConfigMutator;
    /**
     * Add rule to the module config
     * @param rule
     * @param opts
     * @returns
     */
    addModuleRule(rule: RuleSetRule | any, opts?: AddToArrayOpts): WebpackConfigMutator;
    /**
     * Add many rules to the module config
     * @param rules
     * @param opts
     * @returns
     */
    addModuleRules(rules: RuleSetRule[] | any[], opts?: AddToArrayOpts): WebpackConfigMutator;
    /** Add rule to the module config
     * @param entry
     * @param opts
     * @returns
     */
    addRuleToOneOf(rule: RuleSetRule | any, opts?: AddToArrayOpts): WebpackConfigMutator;
    /**
     * Add a new plugin
     * @param plugin
     * @param opts
     * @returns
     */
    addPlugin(plugin: any, opts?: AddToArrayOpts): WebpackConfigMutator;
    /**
     * Add many new plugins
     * @param plugin
     * @param opts
     * @returns
     */
    addPlugins(plugins: Array<any>, opts?: AddToArrayOpts): WebpackConfigMutator;
    /**
     * Add aliases
     * @param aliases
     * @returns
     */
    addAliases(aliases: {
        [index: string]: string | false | string[];
    }): WebpackConfigMutator;
    /**
     * Add aliases
     * @param aliases
     * @returns
     */
    removeAliases(aliases: string[]): WebpackConfigMutator;
    /**
     * Add resolve
     * @param resolve
     * @returns
     */
    addResolve(resolve: ResolveOptions | any): WebpackConfigMutator;
    /**
     * to be used to ignore replace packages with global variable
     * Useful when trying to offload libs to CDN
     * @param externalDeps
     * @returns
     */
    addExternals(externalDeps: Configuration['externals'] | any): WebpackConfigMutator;
    /**
     * Merge external configs with the current config (utilize webpack-merge)
     * @param configs
     * @param opts
     */
    merge(config: Configuration | Configuration[] | any, opts?: MergeOpts): WebpackConfigMutator;
    /**
     * Merge external configs with the current config uses customize (array/object) function (utilize webpack-merge)
     * @param configs
     * @param customizes
     * @param opts
     * @returns
     */
    mergeWithCustomize(configs: Configuration[] | any, customizes: ICustomizeOptions, opts: MergeOpts): WebpackConfigMutator;
    /**
     * Merge external configs with the current config uses rules (utilize webpack-merge)
     * @param configs
     * @param rules
     * @param opts
     * @returns
     */
    mergeWithRules(configs: Configuration[] | any, rules: Rules | any, opts: MergeOpts): WebpackConfigMutator | any;
    /**
     * Add PostCSS plugins
     * @param plugins
     * @returns
     * @example
     * addPostCssPlugins([require('tailwindcss')]);
     */
    addPostCssPlugins(plugins: Array<any>): WebpackConfigMutator;
    /**
     * Add a custom element to the html template
     * @param element
     * @returns
     * @example
     * addElementToHtmlTemplate({ parent: 'head', position: 'append', tag: 'script', attributes: { src: 'https://cdn.com/script.js', async: true } });
     * addElementToHtmlTemplate({ parent: 'body', position: 'prepend', tag: 'script', content: 'console.log("hello world")' });
     */
    addElementToHtmlTemplate(element: CustomHtmlElement): this;
    /**
     * Remove a custom element from the html template
     * @param element
     * @returns
     * @example
     * removeElementFromHtmlTemplate('<script>console.log("hello")</script>');
     * removeElementFromHtmlTemplate('<script src="https://example.com/script.js"></script>');
     */
    removeElementFromHtmlTemplate(element: string): this;
}
