declare const _exports: {
    extends: string[];
    plugins: string[];
    settings: {
        'mdx/code-blocks': boolean;
        jest: {
            version: number;
        };
        react: {
            version: string;
        };
    };
    env: {
        'jest/globals': boolean;
        browser: boolean;
        mocha: boolean;
        node: boolean;
        es6: boolean;
    };
    overrides: ({
        files: string[];
        extends: string[];
        parser: string;
        parserOptions: {
            warnOnUnsupportedTypeScriptVersion: boolean;
            ecmaVersion: number;
            sourceType: string;
            ecmaFeatures: {
                modules: boolean;
                jsx: boolean;
            };
            extraFileExtensions?: undefined;
            extensions?: undefined;
        };
        rules: {
            '@typescript-eslint/no-unused-vars': string;
            'no-nested-ternary': string;
            'react/self-closing-comp': string;
            'import/order': string;
            'object-shorthand': string;
            'react/button-has-type': string;
            'react/jsx-boolean-value': string;
            'jsx-a11y/accessible-emoji': string;
            "jsx-a11y/anchor-is-valid": string;
            "jsx-a11y/click-events-have-key-events": string;
            "jsx-a11y/no-noninteractive-element-interactions": string;
            "jsx-a11y/no-static-element-interactions": string;
            "jsx-a11y/control-has-associated-label": string;
            "jsx-a11y/interactive-supports-focus": string;
            "jsx-a11y/label-has-associated-control": string;
            '@typescript-eslint/camelcase': string;
            "no-unused-expressions": string;
            "@typescript-eslint/no-unused-expressions": string;
            'import/no-extraneous-dependencies': string;
            'import/prefer-default-export': string;
            'react/jsx-props-no-spreading': string;
            'react/no-array-index-key': string;
            'trailing-comma': string;
            'react/require-default-props': string;
            'import/extensions': string;
            '@typescript-eslint/comma-dangle': string;
            'object-curly-newline': string;
            'react/react-in-jsx-scope': string;
            'class-methods-use-this': string;
            'arrow-body-style': string;
            'prefer-arrow-callback': string;
            'no-underscore-dangle': string;
            '@typescript-eslint/no-empty-function': string;
        };
    } | {
        rules: {
            'react/jsx-uses-vars': string;
            'import/extensions': string;
            'react/jsx-uses-react': string;
            'import/no-unresolved': string;
            '@typescript-eslint/no-unused-vars'?: undefined;
            'no-nested-ternary'?: undefined;
            'react/self-closing-comp'?: undefined;
            'import/order'?: undefined;
            'object-shorthand'?: undefined;
            'react/button-has-type'?: undefined;
            'react/jsx-boolean-value'?: undefined;
            'jsx-a11y/accessible-emoji'?: undefined;
            "jsx-a11y/anchor-is-valid"?: undefined;
            "jsx-a11y/click-events-have-key-events"?: undefined;
            "jsx-a11y/no-noninteractive-element-interactions"?: undefined;
            "jsx-a11y/no-static-element-interactions"?: undefined;
            "jsx-a11y/control-has-associated-label"?: undefined;
            "jsx-a11y/interactive-supports-focus"?: undefined;
            "jsx-a11y/label-has-associated-control"?: undefined;
            '@typescript-eslint/camelcase'?: undefined;
            "no-unused-expressions"?: undefined;
            "@typescript-eslint/no-unused-expressions"?: undefined;
            'import/no-extraneous-dependencies'?: undefined;
            'import/prefer-default-export'?: undefined;
            'react/jsx-props-no-spreading'?: undefined;
            'react/no-array-index-key'?: undefined;
            'trailing-comma'?: undefined;
            'react/require-default-props'?: undefined;
            '@typescript-eslint/comma-dangle'?: undefined;
            'object-curly-newline'?: undefined;
            'react/react-in-jsx-scope'?: undefined;
            'class-methods-use-this'?: undefined;
            'arrow-body-style'?: undefined;
            'prefer-arrow-callback'?: undefined;
            'no-underscore-dangle'?: undefined;
            '@typescript-eslint/no-empty-function'?: undefined;
        };
        parserOptions: {
            extraFileExtensions: string[];
            ecmaVersion: number;
            sourceType: string;
            ecmaFeatures: {
                modules: boolean;
                jsx: boolean;
            };
            extensions: string[];
            warnOnUnsupportedTypeScriptVersion?: undefined;
        };
        ignorePatterns?: string | string[] | undefined;
        root?: boolean | undefined;
        $schema?: string | undefined;
        env?: {
            [name: string]: boolean;
        } | undefined;
        extends: string | string[];
        globals?: {
            [name: string]: boolean | "off" | "readonly" | "readable" | "writable" | "writeable";
        } | undefined;
        noInlineConfig?: boolean | undefined;
        overrides?: import("eslint").Linter.ConfigOverride<import("eslint").Linter.RulesRecord>[] | undefined;
        parser?: string | undefined;
        plugins?: string[] | undefined;
        processor?: string | undefined;
        reportUnusedDisableDirectives?: boolean | undefined;
        settings?: {
            [name: string]: any;
        } | undefined;
        files: string[];
    } | {
        ignorePatterns?: string | string[] | undefined;
        root?: boolean | undefined;
        $schema?: string | undefined;
        env?: {
            [name: string]: boolean;
        } | undefined;
        extends?: string | string[] | undefined;
        globals?: {
            [name: string]: boolean | "off" | "readonly" | "readable" | "writable" | "writeable";
        } | undefined;
        noInlineConfig?: boolean | undefined;
        overrides?: import("eslint").Linter.ConfigOverride<import("eslint").Linter.RulesRecord>[] | undefined;
        parser?: string | undefined;
        parserOptions?: import("eslint").Linter.ParserOptions | undefined;
        plugins?: string[] | undefined;
        processor?: string | undefined;
        reportUnusedDisableDirectives?: boolean | undefined;
        settings?: {
            [name: string]: any;
        } | undefined;
        rules?: Partial<import("eslint").Linter.RulesRecord> | undefined;
        files: string;
    })[];
};
export = _exports;
