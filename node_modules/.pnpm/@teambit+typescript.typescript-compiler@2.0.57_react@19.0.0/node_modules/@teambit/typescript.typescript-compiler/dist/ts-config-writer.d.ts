import { ExecutionContext } from '@teambit/envs';
import type { ConfigWriterHandler, ConfigWriterEntry, ExtendingConfigFile, ConfigFile, EnvMapValue, PostProcessExtendingConfigFilesArgs, GenerateExtendingConfigFilesArgs } from '@teambit/workspace-config-files';
import { Logger } from '@teambit/logger';
import { TypeScriptCompilerOptions } from './typescript-compiler-options';
export declare const GLOBAL_TYPES_DIR = "global-types";
export type TypescriptConfigWriterOptions = Pick<TypeScriptCompilerOptions, 'tsconfig' | 'compilerOptions' | 'types'> & {
    name?: string;
    options?: {
        paths?: Record<string, string[]>;
        includes?: string[];
    };
};
export declare class TypescriptConfigWriter implements ConfigWriterEntry {
    readonly name: string;
    private tsconfig;
    private typesPaths;
    private logger;
    private options?;
    id: string;
    patterns: string[];
    constructor(name: string, tsconfig: Record<string, any>, typesPaths: string[], logger: Logger, options?: {
        paths?: Record<string, string[]>;
        includes?: string[];
    });
    calcConfigFiles(_executionContext: ExecutionContext, envMapValue: EnvMapValue, configsRootDir: string, workspaceDir: string): ConfigFile[] | undefined;
    private addRootDir;
    private addPaths;
    private addIncludes;
    private getGlobalTypesConfigFiles;
    mergeConfigFiles?(configFile: ConfigFile, configFile2: ConfigFile): string;
    generateExtendingFile(args: GenerateExtendingConfigFilesArgs): ExtendingConfigFile | undefined;
    postProcessExtendingConfigFiles?(args: PostProcessExtendingConfigFilesArgs): Promise<string | undefined>;
    isBitGenerated(filePath: string): boolean;
    static from(options: TypescriptConfigWriterOptions): ConfigWriterHandler;
    static create(options: TypescriptConfigWriterOptions, logger: Logger): TypescriptConfigWriter;
}
