import { BuildContext, BuiltTaskResult } from '@teambit/builder';
import typescript from 'typescript';
import { EnvHandler } from '@teambit/envs';
import { Compiler, TranspileFileParams, TranspileFileOutput, TypeGeneratorCompParams } from '@teambit/compiler';
import { Logger } from '@teambit/logger';
import { TypeScriptCompilerOptions } from './typescript-compiler-options';
export declare class TypescriptCompiler implements Compiler {
    readonly id: string;
    private logger;
    private options;
    private rawTsConfig;
    private tsModule;
    distDir: string;
    distGlobPatterns: string[];
    shouldCopyNonSupportedFiles: boolean;
    artifactName: string;
    constructor(id: string, logger: Logger, options: TypeScriptCompilerOptions, rawTsConfig: Record<string, any>, tsModule: typeof typescript);
    displayName: string;
    deleteDistDir: boolean;
    /**
     * get the computed tsconfig for the instance.
     * TODO: @gilad support transformers here.
     */
    get tsconfig(): Record<string, any>;
    displayConfig(): string;
    getDistDir(): string;
    preGenerateTypesOnWorkspace(params: TypeGeneratorCompParams[], envId: string): Promise<void>;
    private createHost;
    generateTypesOnWorkspace(rootDir: string, params: TypeGeneratorCompParams[]): Promise<void>;
    /**
     * compile one file on the workspace
     */
    transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput;
    private concatDistDirIfNeeded;
    preBuild(context: BuildContext): Promise<void>;
    /**
     * compile multiple components on the capsules
     */
    build(context: BuildContext): Promise<BuiltTaskResult>;
    /**
     * The postBuild function processes and modifies .cjs files in the originalSeedersCapsules of the context's capsule
     * network.
     * It will remove the `export {};` statement from the end of the .cjs files.
     * As this is not valid JavaScript, it is necessary to remove this statement to ensure that the .cjs files can be used
     * as expected.
     * See: https://github.com/microsoft/TypeScript/issues/50647
     * Once this is merged into the TypeScript compiler, this function will no longer be necessary.
     * @param {BuildContext} context - The `context` parameter in the `postBuild` function seems to be of type
     * `BuildContext`. It is used to access information and perform actions related to the build process. In the provided
     * code snippet, the `postBuild` function is processing capsules in the `capsuleNetwork` of the context
     */
    postBuild(context: BuildContext): Promise<void>;
    getArtifactDefinition(): {
        generatedBy: string;
        name: string;
        globPatterns: string[];
    }[];
    /**
     * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js
     */
    getDistPathBySrcPath(srcPath: string): string;
    /**
     * whether typescript is able to compile the given path
     */
    isFileSupported(filePath: string): boolean;
    /**
     * we have two options here:
     * 1. pass all capsules-dir at the second parameter of createSolutionBuilder and then no
     * need to write the main tsconfig.json with all the references.
     * 2. write main tsconfig.json and pass the capsules root-dir.
     * we went with option #2 because it'll be easier for users to go to the capsule-root and run
     * `tsc --build` to debug issues.
     */
    private runTscBuild;
    private getFormatDiagnosticsHost;
    private getDefaultGlobalTypes;
    private writeTypes;
    private removeDuplicateTypes;
    /**
     * when using project-references, typescript adds a file "tsconfig.tsbuildinfo" which is not
     * needed for the package.
     */
    private writeNpmIgnore;
    private writeProjectReferencesTsConfig;
    private writeTsConfig;
    private getCapsuleTsConfigName;
    private stringifyTsconfig;
    private replaceFileExtToJs;
    version(): string;
    static create(options: TypeScriptCompilerOptions, { logger }: {
        logger: Logger;
    }): Compiler;
    static from(options: TypeScriptCompilerOptions): EnvHandler<Compiler>;
}
