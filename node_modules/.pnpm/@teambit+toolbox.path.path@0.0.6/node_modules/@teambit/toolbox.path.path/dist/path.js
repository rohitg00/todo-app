"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathJoinLinux = pathJoinLinux;
exports.pathNormalizeToLinux = pathNormalizeToLinux;
exports.pathRelativeLinux = pathRelativeLinux;
exports.pathResolveToLinux = pathResolveToLinux;
exports.getPathRelativeRegardlessCWD = getPathRelativeRegardlessCWD;
exports.removeFileExtension = removeFileExtension;
exports.normalizeWindowsImportPath = normalizeWindowsImportPath;
const normalize_path_1 = __importDefault(require("normalize-path"));
const path = __importStar(require("path"));
function pathJoinLinux(...paths) {
    return (0, normalize_path_1.default)(path.join(...paths));
}
function pathNormalizeToLinux(pathToNormalize = '') {
    return (0, normalize_path_1.default)(pathToNormalize);
}
function pathRelativeLinux(from, to) {
    return (0, normalize_path_1.default)(path.relative(from, to));
}
function pathResolveToLinux(arr) {
    return (0, normalize_path_1.default)(path.resolve(arr.join(',')));
}
/**
 * path.resolve uses current working dir.
 * sometimes the cwd is not important. a user may running bit command from an inner dir.
 */
function getPathRelativeRegardlessCWD(from, to) {
    const fromLinux = pathNormalizeToLinux(from);
    const toLinux = pathNormalizeToLinux(to);
    // change them to absolute so path.relative won't consider the cwd
    return pathRelativeLinux(`/${fromLinux}`, `/${toLinux}`);
}
/**
 * e.g. given `a/b/index.js` return `a/b/index`.
 */
function removeFileExtension(filePath) {
    const parsedPath = path.parse(filePath);
    return path.join(parsedPath.dir, parsedPath.name);
}
/**
 * when used import paths, the paths always start with \<DRIVE>:\, e.g. \C:\Users\<USER>\<PATH>
 * this function will normalize the path to <DRIVE>:\<PATH>
 */
function normalizeWindowsImportPath(pathToNormalize) {
    if ((pathToNormalize.startsWith('/') || pathToNormalize.startsWith('\\')) && process.platform === 'win32') {
        return pathToNormalize.slice(1);
    }
    return pathToNormalize;
}
//# sourceMappingURL=path.js.map