export type PathLinux = string;
export type PathLinuxRelative = string;
export type PathLinuxAbsolute = string;
export type PathOsBased = string | PathOsBasedRelative | PathOsBasedAbsolute;
export type PathOsBasedRelative = string;
export type PathOsBasedAbsolute = string;
export type PathRelative = string;
export type PathAbsolute = string;
export declare function pathJoinLinux(...paths: any[]): PathLinux;
export declare function pathNormalizeToLinux(pathToNormalize?: PathOsBased): PathLinux;
export declare function pathRelativeLinux(from: PathOsBased, to: PathOsBased): PathLinux;
export declare function pathResolveToLinux(arr: PathOsBased[]): PathLinux;
/**
 * path.resolve uses current working dir.
 * sometimes the cwd is not important. a user may running bit command from an inner dir.
 */
export declare function getPathRelativeRegardlessCWD(from: PathOsBasedRelative, to: PathOsBasedRelative): PathLinuxRelative;
/**
 * e.g. given `a/b/index.js` return `a/b/index`.
 */
export declare function removeFileExtension(filePath: string): string;
/**
 * when used import paths, the paths always start with \<DRIVE>:\, e.g. \C:\Users\<USER>\<PATH>
 * this function will normalize the path to <DRIVE>:\<PATH>
 */
export declare function normalizeWindowsImportPath(pathToNormalize: PathOsBased): string;
